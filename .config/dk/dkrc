#!/bin/sh

# example dkrc to show some basic command usage and error reporting

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: > "$logfile"


# (re)load sxhkd for keybinds
if hash sxhkd >/dev/null 2>&1; then
	pkill sxhkd
	sxhkd -m -1 -c "$HOME/.config/dk/sxhkdrc" &
fi

# (re)load lemonbar script
#if hash lemonbar bar >/dev/null 2>&1; then
#	pkill lemonbar
#	bar 2>/dev/null &
#fi

#==== run some shit
#$HOME/.config/dk/scripts/bar2.sh &
~/.config/dk/polybar/launch.sh &
sleep 15 && st -f "JetBrainsMono Nerd Font:style:regular:pixelsize=16" -g 254x35 -n dropdown -T dropdown &

# adjust border widths based on the DPI of the monitor
#px=$(xrandr | grep ' connected' | tail -n1 | grep -o '[0-9]\+x[0-9]\+' | cut -d'x' -f2)
#mm=$(xrandr | grep ' connected' | tail -n1 | grep -o '[0-9]\+mm' | tail -n1 | sed 's/mm//')
#dpi=$(( (px / mm) * 25 ))

#if [ $dpi -ge 140 ]; then
#	border_width=5
#	border_outer_width=3
#elif [ $dpi -ge 120 ]; then
#	border_width=4
#	border_outer_width=2
#else
#	border_width=2
#	border_outer_width=1
#fi

{ # compound command to redirect all output

	# workspace settings
	# ------------------------

	# initialize 10 workspaces (1-10) (default: 1/monitor)
	dkcmd set numws=11

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=tile master=1 stack=3 gap=10 msplit=0.5 ssplit=0.5

        #dkcmd set ws=_ pad left=0 right=0 top=0 bottom=0 gap=5
	dkcmd set ws=1 layout=grid

	# use grid layout, padding, and gaps on workspace 10
	dkcmd set ws=10 layout=grid pad left=200 right=200 top=100 bottom=100 gap=50

	# change workspace names (default: number == name)
	# dkcmd set \
	# 	ws=1  name="edit" \
	# 	ws=2  name="web" \
	# 	ws=3  name="😀" \
	# 	ws=4  name="😠" \
	# 	ws=5  name="5" \
	# 	ws=6  name="6" \
	# 	ws=7  name="7" \
	# 	ws=8  name="8" \
	# 	ws=9  name="9" \
	# 	ws=10 name="10"

	dkcmd set \
		ws=1  name="1: " \
		ws=2  name="2: " \
		ws=3  name="3: " \
		ws=4  name="4: " \
		ws=5  name="5: " \
		ws=6  name="6: " \
		ws=7  name="7: " \
		ws=8  name="8: " \
		ws=9  name="9: 󰊫" \
		ws=10 name="10: " \
		ws=11 name="11: "

	# enable static workspaces and assign them to monitors (only relevant for multiple monitors)
	# aside -
	#       many that come from other workspace models tried dk and requested this feature
	#       try embracing the default behaviour and allow access to any workspace from any monitor
	#       you might end up liking it :)
	#
	# mon1='DisplayPort-0'
	# mon2='HDMI-A-0'
	# dkcmd set static_ws=true \
	# 	ws=1  mon=$mon1 \
	# 	ws=2  mon=$mon1 \
	# 	ws=3  mon=$mon1 \
	# 	ws=4  mon=$mon1 \
	# 	ws=5  mon=$mon1 \
	# 	ws=6  mon=$mon2 \
	# 	ws=7  mon=$mon2 \
	# 	ws=8  mon=$mon2 \
	# 	ws=9  mon=$mon2 \
	# 	ws=10 mon=$mon2


	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=true focus_mouse=true

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=false

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=10

	# disable gaps and borders in single window layouts
	#dkcmd set smart_gap=true smart_border=true
        dkcmd set smart_gap=false smart_border=false

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=alt move=button1 resize=button3

	# obey motif border hints on windows that draw their own (steam, easyeffects, etc.)
	dkcmd set obey_motif=true


	# borders
	# ---------

	# traditional
	# set border width and colour for each window state
	# dkcmd set border width=$border_width colour focus='#6699cc' unfocus='#000000' urgent='#ee5555'

	# alternative
	# enable split borders and colours, width is overall width, outer_width consumes some of width.
	# outer_width must be less than width, outer_width of 0 will be single borders
	##dkcmd set border width=$border_width outer_width=$border_outer_width \
        	dkcmd set border width=5 outer_width=3 \
		colour \
		focus='#5e81ac' \
		unfocus='#2e3440' \
		urgent='#d08770' \
		outer_focus='#242841' \
		outer_unfocus='#242841' \
		outer_urgent='#242841'

	# window rules
	# --------------

	# rule class, instance, and title regexes (*ALWAYS* CASE INSENSITIVE)

	# open window(s) on a specific workspace (assigned monitor)
	#dkcmd rule class="^gimp$" ws=5

	# open window(s) on a monitor by number or name (active workspace on monitor)
	dkcmd rule class="^chromium$" mon="HDMI-A-0"

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore_cfg=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore_cfg=true callback=albumart bw=0

	# open window(s) in a floating state
	dkcmd rule class="^(pavucontrol|transmission-gtk|steam|lxappearance)$" float=true
        dkcmd rule class="^Xfce-polkit$" title="^Authentication required$" float=true
        dkcmd rule class="^thunar$" title="^File Operation Progress$" float=true
	dkcmd rule class="^gnome-calculator$" float=true
        dkcmd rule class="^Gcolor3$" float=true
	dkcmd rule class="^Galculator$" float=true

	# open window(s) with a specific geometry and coordinates (floating only!)
	dkcmd rule class="^google-chrome$" title="^open files$" float=true w=1280 h=720
	dkcmd rule class="^Nsxiv$" instance="^Kunst$" float=true x=2270 y=1150 w=250 h=250 ws=7
	dkcmd rule class="^St$" title="^ncmpcpp$" float=true x=20 y=45 w=1100 h=700 ws=7 focus=true
	dkcmd rule class="^xterm$" title="^ncmpcpp$" float=true x=20 y=45 w=1100 h=700 ws=7 focus=true
	dkcmd rule class="^kitty$" title="^ncmpcpp$" float=true x=20 y=45 w=1100 h=700 ws=7 focus=true
	dkcmd rule class="^Alacritty$" title="^ncmpcpp$" float=true x=20 y=45 w=1100 h=700 ws=7 focus=true
	dkcmd rule class="^St$" title="^calcurse$" float=true

	# open window(s) with sticky and floating enabled to view on all workspaces.
	dkcmd rule class="^stickyterm$" stick=true float=true w=1280 h=720

	# open window(s) with ignore_msg=true to avoid focus being grabbed and changing workspace.
	dkcmd rule class="^TelegramDesktop$" ignore_msg=true

	# focus window and workspace on opening
	dkcmd rule class="^firefox$" ws=2 focus=true
	dkcmd rule class="^Microsoft-edge$" ws=2 focus=true

	# scratch dropdown term
        dkcmd rule class="^St$" title="dropdown" float=true scratch=true

	# update or remove an existing rule with the same match patterns
	#dkcmd rule class="^firefox$" mon="HDMI-A-0"
	#dkcmd rule remove class="^firefox$"

	dkcmd rule class="^Thunar$" ws=3 focus=true
        dkcmd rule class="^Mousepad$" ws=4 focus=true
	dkcmd rule class="^Gimp-2.10" ws=5 focus=true
        dkcmd rule class="^Steam$" ws=6 focus=true
        dkcmd rule class="^heroic$" ws=6 focus=true
	dkcmd rule class="^Cider$" ws=7 focus=true
	dkcmd rule class="^discord$" ws=8 focus=true
        dkcmd rule class="^Smuxi-frontend-gnome$" ws=8 focus=true
	dkcmd rule class="^Srain$" ws=8 focus=true
	dkcmd rule class="^dev.geopjr.Tuba$" ws=8 focus=true
	dkcmd rule class="^Cinny$" ws=8 focus=true
	dkcmd rule class="^TelegramDesktop$" ws=8 focus=true
	dkcmd rule class="^Element$" ws=8 focus=true
	dkcmd rule class="^lemoa$" ws=8 focus=true
	dkcmd rule class="^Chromium-browser$" ws=9 focus=true
	dkcmd rule class="^Google-chrome$" ws=11 focus=true
	dkcmd rule class="^thunderbird$" ws=9
	dkcmd rule class="^valent$" ws=10
	dkcmd rule class="^kdeconnect.sms$" ws=10 focus=true
	dkcmd rule class="^kdeconnect.handler$" ws=10 focus=true
	dkcmd rule class="^kdeconnect-indicator$" ws=10 focus=true
	dkcmd rule class="^kdeconnect-settings$" ws=10 focus=true

	# apply current rule set to all existing windows (used mainly for WM restart)
	dkcmd rule apply '*'

	# delete all rules
	# dkcmd rule remove '*'

} >> "$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

exit 0
