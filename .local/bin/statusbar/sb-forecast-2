#!/bin/sh

# Displays today's precipitation chance (☔) and daily low (🥶) and high (🌞).
# Usually intended for the statusbar.   󰕊  󰖔
# Signal 5

# If we have internet, get a weather report from wttr.in and store it locally.
# You could set up a shell alias to view the full file in a pager in the
# terminal if desired. This function will only be run once a day when needed.
weatherreport="${XDG_DATA_HOME:-$HOME/.local/share}/weatherreport"
getforecast() {
    curl -sf "wttr.in/Coleman?u" > "$weatherreport" && sed '$ d' "$weatherreport" > "${weatherreport}.tmp" && mv "${weatherreport}.tmp" "$weatherreport" || exit 1
}

# Some very particular and terse stream manipulation. We get the maximum
# precipitation chance and the daily high and low from the downloaded file and
# display them with corresponding emojis.
showweather() {
    printf "^c#8FBCBB^%s" "$(sed '16q;d' "$weatherreport" | grep -wo "[0-9]*%" | sort -rn | sed "s/^/ /g;1q" | tr -d '\n')"
    sed '13q;d' "$weatherreport" | grep -o "m\\([-+]\\)*[0-9]\\+" | sed 's/+//g' | sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk '{print " 󰖔" $1 "°","󰖙" $2 "°^d^"}'
}

case $BLOCK_BUTTON in
    1) st -f "JetBrainsMono Nerd Font-9" sh -c "curl -s 'wttr.in/Coleman?u'; read;" ;;
    2) notify-send "🌄Updating forecast..." && getforecast && showweather ;;
    3) notify-send --expire-time=3000 "🌈 Weather module" "\<b>$(showweather)</b>
- : Chance of rain/snow
- 󰖔: Daily low
- 󰖙: Daily high
<i>- Left click for full forecast.</i>
<i>- Middle click to update forecast.</i>" ;;
    6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# The test if our forecast is updated to the day. If it isn't, download a new
# weather report from wttr.in with the above function. In addition to that test
# if the downloaded file has actual content, otherwise the site is down.
{ [ "$(stat -f %Sm -t %Y-%m-%d "$weatherreport" 2>/dev/null)" = "$(date '+%Y-%m-%d')" ] && [ -s "$weatherreport" ] ;} ||
    getforecast
showweather
